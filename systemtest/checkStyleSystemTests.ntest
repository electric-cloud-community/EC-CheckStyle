# -*-Perl-*-

# checkStyleSystemTests.ntest -
#
# ECCheckStyle
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;

 
# system tests


require "$::gTestFileDir/checkStyle-common.ntest";

$::gProjectImported = 0;
$::gtestProjectName = 'CheckStyleTestProject';

my $outcome = '';

sub importProject() {
    assertOK($::N->import(
             { file =>"$::gTestFileDir/checkStyleSystemTests.xml",
               path  => "/projects/CheckStyleTestProject",
               force => 1
             } ), 'import runCommandLine');
   
    assertOK($::N->getProcedure($::gtestProjectName, 'runCheckStyleWithRequiredOptions'),
    'runCheckStyleWithRequiredOptions procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'runCheckStyleWithRequiredOptionsAndAdditionals'),
    'runCheckStyleWithRequiredOptionsAndAdditionals procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'runCheckStyleWithRequiredOptionsAndLogFileToOutput'),
    'runCheckStyleWithRequiredOptionsAndLogFileToOutput procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'runCheckStyleWithRequiredOptionsAndPropFile'),
    'runCheckStyleWithRequiredOptionsAndPropFile procedure doesn\'t exist');
    
    assertOK($::N->getProcedure($::gtestProjectName, 'runCheckStyleWithRequiredOptionsUsingAFile'),
    'runCheckStyleWithRequiredOptionsUsingAFile procedure doesn\'t exist');    
    
    $::gProjectImported = 1;
}


sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }

   
}
 
ntest "runCheckStyleWithRequiredOptions", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "runCheckStyleWithRequiredOptions",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
      # get the value of the commands lines
      my $csCommandLine = $xpath->findvalue("//property[propertyName='checkStyleCommandLine']/value");
      assertEq($csCommandLine, '"java" -jar "checkstyle-all-5.1.jar" -c "sun_checks.xml" -f "plain" -r "E:\emma-2.0.5312-src\emma-2.0.5312\core\"', 
           'checkStyle command line doesn\'t match expected output');

};

ntest "runCheckStyleWithRequiredOptionsAndAdditionals", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "runCheckStyleWithRequiredOptionsAndAdditionals",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $csCommandLine = $xpath->findvalue("//property[propertyName='checkStyleCommandLine']/value");
      my $workingDir = $xpath->findvalue("//property[propertyName='workingDir']/value");

      assertEq('E:\\checkstyle-5.1\\checkstyle-5.1\\', $workingDir, 'working dir does not match');
      assertEq($csCommandLine, '"java" -Xmx=512M -jar "checkstyle-all-5.1.jar" -c "sun_checks.xml" -f "plain" -r "E:\emma-2.0.5312-src\emma-2.0.5312\core\"', 
           'checkStyle command line doesn\'t match expected output');

};

ntest "runCheckStyleWithRequiredOptionsAndLogFileToOutput", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "runCheckStyleWithRequiredOptionsAndLogFileToOutput",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $csCommandLine = $xpath->findvalue("//property[propertyName='checkStyleCommandLine']/value");
      my $workingDir = $xpath->findvalue("//property[propertyName='workingDir']/value");

      assertEq('E:\\checkstyle-5.1\\checkstyle-5.1\\', $workingDir, 'working dir does not match');
      assertEq($csCommandLine, '"java" -jar "checkstyle-all-5.1.jar" -c "sun_checks.xml" -f "plain" -o "e:/checklog.txt" "E:\emma-2.0.5312-src\emma-2.0.5312\core\java12\com\vladium\emma\EMMAProperties.java"', 
           'checkStyle command line doesn\'t match expected output');

};

ntest "runCheckStyleWithRequiredOptionsAndPropFile", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "runCheckStyleWithRequiredOptionsAndPropFile",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $csCommandLine = $xpath->findvalue("//property[propertyName='checkStyleCommandLine']/value");
      my $workingDir = $xpath->findvalue("//property[propertyName='workingDir']/value");

      assertEq('E:\\checkstyle-5.1\\checkstyle-5.1\\', $workingDir, 'working dir does not match');
      assertEq($csCommandLine, '"java" -jar "checkstyle-all-5.1.jar" -c "sun_checks.xml" -p "myCheckstyle.properties" -r "E:\emma-2.0.5312-src\emma-2.0.5312\core\"', 
           'checkStyle command line doesn\'t match expected output');

};

ntest "runCheckStyleWithRequiredOptionsUsingAFile", {}, sub {
      
      doSetup();
      
      # run test job
     
      my $xpath = $::N->runProcedure($::gtestProjectName, 
              {procedureName => "runCheckStyleWithRequiredOptionsUsingAFile",
              pollInterval  => '1',
              timeout => 600,
                   actualParameter => [
                  
                  ]
      });
          
       
      # make sure it finished
      my $jobId = 0;
      my $status = '';
      
      assertOK($xpath, 'runProcedure has errors');
      if ($xpath) {
          $jobId  = $xpath->findvalue("//jobId");
          $status = $xpath->findvalue("//status");
          $outcome = $xpath->findvalue("//outcome");
  
          assertTrue($jobId && $jobId ne "",'valid job id');
          assertEq('completed',$status,"job $jobId complete");
  
          #abort if job did not finish
          if ($status ne 'completed') {
              assertOK($::N->abortJob($jobId, {force => 1}));
          }
      }

      # get the job details
      $xpath = $::N->getJobDetails($jobId);
   
      # get the value of the commands lines
      my $csCommandLine = $xpath->findvalue("//property[propertyName='checkStyleCommandLine']/value");
      my $workingDir = $xpath->findvalue("//property[propertyName='workingDir']/value");

      assertEq('E:\\checkstyle-5.1\\checkstyle-5.1\\', $workingDir, 'working dir does not match');
      assertEq($csCommandLine, '"java" -jar "checkstyle-all-5.1.jar" -c "sun_checks.xml" "E:\emma-2.0.5312-src\emma-2.0.5312\core\java12\com\vladium\emma\EMMAProperties.java"', 
           'checkStyle command line doesn\'t match expected output');

};
